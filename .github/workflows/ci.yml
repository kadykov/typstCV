---
name: Pre-commit checks, build and test Docker image, upload PDFs to GitHub Pages, create GitHub release

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch:

env:
  IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY }}
  IMAGE_TAG_TESTING: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY }}:testing
  OUTPUT_ARTIFACTS_NAME: pdf
  EXAMPLE_ARTIFACTS_NAME: examples
  TEST_DIR: tests # Directory containing test scripts and fixtures
  # DEV_IMAGE_NAME will be set dynamically in the job

jobs:
  pre_commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: pre-commit/action@v3.0.1
      - uses: pre-commit-ci/lite-action@v1.0.3
        if: always()

  # The 'source' job previously here is removed as it's no longer needed.

  docker:
    name: Build, test, and push Docker image
    needs: pre_commit # Now only depends on pre_commit
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed for checkout
      packages: write # Needed to push to GHCR
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry # For devcontainer cache
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub # For production image testing cache pull
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.IMAGE_TAG_TESTING }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:testing # Cache from previous testing tag if exists
          cache-to: type=inline

      - name: Checkout code
        uses: actions/checkout@v4
        # Submodules are no longer used for testing dependencies
        # submodules: recursive # Keep commented out as reference if needed

      - name: Set Devcontainer Image Name Env Var
        run: echo "DEV_IMAGE_NAME=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/devcontainer" >> "$GITHUB_ENV"
        shell: bash

      - name: Devcontainer Docker meta # For devcontainer cache image
        id: devmeta # Ensure this ID is unique
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DEV_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build and Cache Devcontainer Image
        id: build_devcontainer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile.ubuntu
          tags: ${{ steps.devmeta.outputs.tags }}
          push: true # Always push cache to GHCR
          cache-from: type=registry,ref=${{ env.DEV_IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ env.DEV_IMAGE_NAME }}:latest,mode=max # Cache to latest tag

      - name: Install Bats, Helpers, and File command (for Docker usage tests on host)
        run: sudo apt-get update && sudo apt-get install -y bats bats-support bats-assert file

      # The explicit 'docker pull' step previously here is removed as it's redundant.

      - name: Run internal tests (unit, filter, e2e) inside Devcontainer Image
        run: |
          echo "Running internal tests..."
          # Run using the pulled devcontainer image from GHCR, mounting the full workspace
          docker run --rm -v "${PWD}:/workspaces/typstCV" --workdir /workspaces/typstCV ${{ env.DEV_IMAGE_NAME }}:latest just test-internal
          echo "Internal tests finished."

      - name: Run Docker usage tests (on runner host against production image)
        run: |
          echo "Running Docker usage tests..."
          # These tests run on the host, interacting with the built testing image
          # Assumes 'bats' is installed on the runner (installed in previous step)
          # Assumes docker is available on the runner
          # Pass the correct image tag to the test script via env var
          DOCKER_IMAGE_TAG=${{ env.IMAGE_TAG_TESTING }} bats ${{ env.TEST_DIR }}/docker.bats
          echo "Docker usage tests finished."

      - name: Build Example PDFs for Release Artifacts (using production image, mounting only fixtures)
        run: |
          echo "Building example PDFs..."
          # Create host output directory first
          mkdir -p ./examples
          # Mount fixtures to /test-fixtures, mount host output dir to /output
          # Pass arguments directly to the ENTRYPOINT (build.sh)
          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" -v "${PWD}/examples:/output" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            --output-dir /output /test-fixtures/example-cv.md
          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" -v "${PWD}/examples:/output" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            --output-dir /output /test-fixtures/example-letter.md --type letter
          echo "Example PDFs built."

      - name: Upload Example PDFs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_ARTIFACTS_NAME }} # Use the same name expected by release job
          path: ./examples/*.pdf
          if-no-files-found: error

      # Only push final images if tests passed and it's a push to main or a tag
      - name: Login to Docker Hub (for push)
        if: success() && (github.event_name == 'push') # Only push on push events
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=pr

      - name: Build and push # Production image to Docker Hub
        if: success() && (github.event_name == 'push') # Only push on push events
        uses: docker/build-push-action@v6
        with:
          push: true # This step only runs on push events anyway due to the 'if' above
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:testing # Use testing cache
          cache-to: type=inline

    # The duplicate devmeta block was here and is now removed by not including it in the REPLACE section.

  # Removed the 'publish' job for GitHub Pages CV deployment

  release:
    name: Create a GitHub release
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag_name
        run: echo "current_version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Download Example PDFs
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_ARTIFACTS_NAME }} # Artifact containing example-cv.pdf, example-letter.pdf
          path: ./release-assets/ # Download to a specific directory

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: error
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md

      - name: Create release on GitHub
        uses: ncipollo/release-action@v1
        with:
          # Ensure no duplicate keys exist below
          tag: ${{ steps.changelog_reader.outputs.version }}
          name: Release ${{ steps.changelog_reader.outputs.version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ./release-assets/*.pdf
