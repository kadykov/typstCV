---
name: Pre-commit checks, build and test Docker image, upload PDFs to GitHub Pages, create GitHub release

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch:

env:
  IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY }}
  IMAGE_TAG_TESTING: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY }}:testing
  OUTPUT_ARTIFACTS_NAME: pdf
  EXAMPLE_ARTIFACTS_NAME: examples
  TEST_DIR: tests # Directory containing test scripts and fixtures

jobs:
  pre_commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: pre-commit/action@v3.0.1
      - uses: pre-commit-ci/lite-action@v1.0.3
        if: always()

  source:
    name: Extract example source files
    needs: pre_commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Upload source files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXAMPLE_ARTIFACTS_NAME }}
          path: |
            ${{ env.TEST_DIR }}/fixtures/example-*.md
            ${{ env.TEST_DIR }}/fixtures/placeholder-photo.png
          if-no-files-found: error

  docker:
    name: Build, test, and push Docker image
    needs: pre_commit # Doesn't need source artifact anymore, tests are in repo
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.IMAGE_TAG_TESTING }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:testing # Cache from previous testing tag if exists
          cache-to: type=inline

      - name: Checkout code (including submodules for bats)
        uses: actions/checkout@v4
        with:
          submodules: recursive # Needed to get bats-core for docker tests

      - name: Install Bats and File command (for Docker usage tests)
        run: sudo apt-get update && sudo apt-get install -y bats file

      - name: Run tests inside the container (using production image, mounting only fixtures)
        run: |
          echo "Running tests..."
          # Mount only fixtures to /test-fixtures, run tests relative to /data (workdir)
          # Note: Tests might need adjustment if they expect to be run from project root
          # Assuming bats and sh scripts handle paths correctly when run from /data
          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            bats /test-fixtures/../unit/build_sh.bats # Adjust path relative to mount point if needed

          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            bats /test-fixtures/../filter/filters.bats # Adjust path relative to mount point if needed

          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            sh /test-fixtures/../test_e2e.sh # Adjust path relative to mount point if needed
          echo "Container tests finished."

      - name: Run Docker usage tests (on runner host)
        run: |
          echo "Running Docker usage tests..."
          # These tests run on the host, interacting with the built testing image
          # Assumes 'bats' is installed on the runner (installed in previous step)
          # Assumes docker is available on the runner
          bats ${{ env.TEST_DIR }}/docker.bats
          echo "Docker usage tests finished."

      - name: Build Example PDFs for Release Artifacts (using production image, mounting only fixtures)
        run: |
          echo "Building example PDFs..."
          # Create host output directory first
          mkdir -p ./examples
          # Mount fixtures to /test-fixtures, mount host output dir to /output
          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" -v "${PWD}/examples:/output" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            build.sh --output-dir /output /test-fixtures/example-cv.md
          docker run --rm -v "${PWD}/${{ env.TEST_DIR }}/fixtures:/test-fixtures:ro" -v "${PWD}/examples:/output" --workdir /data ${{ env.IMAGE_TAG_TESTING }} \
            build.sh --output-dir /output /test-fixtures/example-letter.md --type letter
          echo "Example PDFs built."

      - name: Upload Example PDFs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_ARTIFACTS_NAME }} # Use the same name expected by release job
          path: ./examples/*.pdf
          if-no-files-found: error

      # Only push final images if tests passed and it's a push to main or a tag
      - name: Login to Docker Hub (for push)
        if: success() && (github.event_name == 'push') # Only push on push events
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:testing # Use testing cache
          cache-to: type=inline

  # Removed the 'publish' job for GitHub Pages CV deployment

  release:
    name: Create a GitHub release
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag_name
        run: echo "current_version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Download Example PDFs
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_ARTIFACTS_NAME }} # Artifact containing example-cv.pdf, example-letter.pdf
          path: ./release-assets/ # Download to a specific directory

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: error
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md

      - name: Create release on GitHub
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.changelog_reader.outputs.version }}
          name: Release ${{ steps.changelog_reader.outputs.version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ./release-assets/*.pdf # Upload PDFs from the download directory
